#!/usr/bin/python3

import sys
import os


# This file contains helpful goodies for scripts that work with the UCD

# MIN_CODE_POINT is assumed to be 0
MAX_CODEPOINT = 0x10FFFF

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def parse_codepoint_range(range_str, splitter=".."):
    parts = range_str.strip().split(splitter)
    if len(parts) == 1:
        minmax = int(parts[0], 16)
        return (minmax, minmax)
    elif len(parts) == 2:
        _min = int(parts[0], 16)
        _max = int(parts[1], 16)
        return (_min, _max)
    else:
        raise RuntimeError("not a range: " + range_str)


def preprocess(file):
    file = os.path.join(os.getenv("UCD_DIR"), file)
    if not os.path.exists(file):
        raise RuntimeError("not found: " + file)
    with open(file) as opened_file:
        for line in opened_file:
            line = line.split('#')[0]
            line = line.strip()
            if len(line) > 0:
                yield line


def get_line_parts(line):
    parts = line.split(';')
    parts = [x.strip() for x in parts]
    return parts


def preprocess_parts(file):
    for ln in preprocess(file):
        yield get_line_parts(ln)


def print_codegen_header():
    print("// This file is programmatically generated from data contained in the UCD")
    print("// See https://www.unicode.org/ucd/")
    print("// Please do not edit this file directly")
    print("#include \"unicode.hpp\"")


def start_test_suite(suite_name):
    print("#include <cxxtest/TestSuite.h>")
    print(f"class {suite_name}TestSuite : public CxxTest::TestSuite {{")
    print("public:")


def end_test_suite():
    print("};")

